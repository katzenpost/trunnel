// Code generated by trunnel. DO NOT EDIT.

package strings

import (
	"bytes"
	"errors"
)

type Message struct {
	Type    uint8
	Text    string
	Padding uint8
}

func (m *Message) Parse(data []byte) ([]byte, error) {
	cur := data
	{
		if len(cur) < 1 {
			return nil, errors.New("data too short")
		}
		m.Type = cur[0]
		cur = cur[1:]
	}
	{
		i := bytes.IndexByte(cur, 0)
		if i < 0 {
			return nil, errors.New("could not parse nul-term string")
		}
		m.Text, cur = string(cur[:i]), cur[i+1:]
	}
	{
		if len(cur) < 1 {
			return nil, errors.New("data too short")
		}
		m.Padding = cur[0]
		cur = cur[1:]
	}
	return cur, nil
}

func ParseMessage(data []byte) (*Message, error) {
	m := new(Message)
	_, err := m.Parse(data)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (m *Message) encodeBinary() []byte {
	var buf []byte
	buf = append(buf, byte(m.Type))
	buf = append(buf, []byte(m.Text)...)
	buf = append(buf, 0)
	buf = append(buf, byte(m.Padding))
	return buf
}

func (m *Message) MarshalBinary() ([]byte, error) {
	if err := m.validate(); err != nil {
		return nil, err
	}
	return m.encodeBinary(), nil
}

func (m *Message) validate() error {
	return nil
}
