// Code generated by trunnel. DO NOT EDIT.

package unions

import (
	"bytes"
	"encoding/binary"
	"errors"
)

type Packet struct {
	Type       uint8
	ByteData   uint8
	WordData   uint16
	StringData string
}

func (p *Packet) Parse(data []byte) ([]byte, error) {
	cur := data
	{
		if len(cur) < 1 {
			return nil, errors.New("data too short")
		}
		p.Type = cur[0]
		cur = cur[1:]
	}
	{
		switch {
		case p.Type == 1:
			{
				if len(cur) < 1 {
					return nil, errors.New("data too short")
				}
				p.ByteData = cur[0]
				cur = cur[1:]
			}
		case p.Type == 2:
			{
				if len(cur) < 2 {
					return nil, errors.New("data too short")
				}
				p.WordData = binary.BigEndian.Uint16(cur)
				cur = cur[2:]
			}
		case p.Type == 3:
			{
				i := bytes.IndexByte(cur, 0)
				if i < 0 {
					return nil, errors.New("could not parse nul-term string")
				}
				p.StringData, cur = string(cur[:i]), cur[i+1:]
			}
		default:
			{
				return nil, errors.New("disallowed case")
			}
		}
	}
	return cur, nil
}

func ParsePacket(data []byte) (*Packet, error) {
	p := new(Packet)
	_, err := p.Parse(data)
	if err != nil {
		return nil, err
	}
	return p, nil
}

func (p *Packet) encodeBinary() []byte {
	var buf []byte
	buf = append(buf, byte(p.Type))
	switch {
	case p.Type == 1:
		buf = append(buf, byte(p.ByteData))
	case p.Type == 2:
		{
			tmp := make([]byte, 2)
			binary.BigEndian.PutUint16(tmp, p.WordData)
			buf = append(buf, tmp...)
		}
	case p.Type == 3:
		buf = append(buf, []byte(p.StringData)...)
		buf = append(buf, 0)
	default:
	}
	return buf
}

func (p *Packet) MarshalBinary() ([]byte, error) {
	if err := p.validate(); err != nil {
		return nil, err
	}
	return p.encodeBinary(), nil
}

func (p *Packet) validate() error {
	switch {
	case p.Type == 1:
	case p.Type == 2:
	case p.Type == 3:
	default:
	}
	return nil
}
