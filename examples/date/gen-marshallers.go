// Code generated by trunnel. DO NOT EDIT.

package date

import (
	"encoding/binary"
	"errors"
)

type Date struct {
	Year  uint16
	Month uint8
	Day   uint8
}

func (d *Date) Parse(data []byte) ([]byte, error) {
	cur := data
	{
		if len(cur) < 2 {
			return nil, errors.New("data too short")
		}
		d.Year = binary.BigEndian.Uint16(cur)
		if !(1970 <= d.Year && d.Year <= 65535) {
			return nil, errors.New("integer constraint violated")
		}
		cur = cur[2:]
	}
	{
		if len(cur) < 1 {
			return nil, errors.New("data too short")
		}
		d.Month = cur[0]
		if !(d.Month == 1 || d.Month == 2 || d.Month == 3 || d.Month == 4 || d.Month == 5 || d.Month == 6 || d.Month == 7 || d.Month == 8 || d.Month == 9 || d.Month == 10 || d.Month == 11 || d.Month == 12) {
			return nil, errors.New("integer constraint violated")
		}
		cur = cur[1:]
	}
	{
		if len(cur) < 1 {
			return nil, errors.New("data too short")
		}
		d.Day = cur[0]
		if !(d.Day == 1 || d.Day == 2 || (3 <= d.Day && d.Day <= 31)) {
			return nil, errors.New("integer constraint violated")
		}
		cur = cur[1:]
	}
	return cur, nil
}

func ParseDate(data []byte) (*Date, error) {
	d := new(Date)
	_, err := d.Parse(data)
	if err != nil {
		return nil, err
	}
	return d, nil
}
