const N_ELEMENTS = 100;
const U8_MAX = 0xff;

struct rgb {
   u8 r;
   u8 g;
   u8 b;
};

const MAX_LEN = 16384;

struct int_constraints {
	u8 version_num IN [ 4, 5, 6 ];
	u16 length IN [ 0..16384 ];
	u16 length2 IN [ 0..MAX_LEN ];
	u8 version_num2 IN [ 1, 2, 4..6, 9..128 ];
};

struct fixed_length_arrays {
    u8 ipv6_addr[16];
    u32 elements[N_ELEMENTS];
    struct rgb colors[2];
    char hostname[0x40];
};

struct encrypted {
   u8 salt[16];
   u8 message[..-32];
   u8 mac[32];
}

struct var_length_array {
  u16 length;
  u8 bytes[length];
  u64 bignums[length];
}

struct has_union {
	u8 tag;
	union addr[tag] {
		4 : u32 ipv4_addr;
		5 : ;
		6 : u8 ipv6_addr[16];
		0xf0,0xf1 : u8 hostname_len;
				char hostname[hostname_len];
		0xF2 .. 0xFF : struct extension ext;
		default : fail;
	};
}

struct fourbytes {
   u16 x;
   u16 y;
   eos;
}

struct union_with_length {
    u8 tag;
    u16 length;
    union addr[tag] with length length {
       4 : u32 ipv4_addr;
       6 : u8 ipv6_addr[16];
       7 : ignore;
       0xEE : u32 ipv4_addr;
              ...;
       0xEF : u32 ipv4_addr;
              u8 remainder[];
       0xF0 : char hostname[];
       default: u8 unrecognized[];
    };
}

struct encrypted {
   u8 type;
   union u[type] with length ..-32 {
      1: u8 bytes[];
  2: u8 salt[16];
     u8 other_bytes[];
   };
   u64 data[4];
}
