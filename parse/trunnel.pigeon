{

package parser

const lingeringDeclarationsKey = "lingering_declarations"

func (c *current) addLingeringDeclaration(d interface{}) {
  var ds []interface{}
  if e, ok := c.state[lingeringDeclarationsKey]; ok {
    ds = e.([]interface{})
  }
  c.state[lingeringDeclarationsKey] = append(ds, d)
}

func (c *current) getLingeringDeclarations() []interface{} {
  if ds, ok := c.state[lingeringDeclarationsKey]; ok {
    return ds.([]interface{})
  }
  return []interface{}{}
}

}

//  Declarations ::= Declaration
//  Declarations ::= Declarations Declaration
//  File ::= Declarations

File <- _ ds:Declaration* _ EOF {
  f := &ast.File{}
  lingering := c.getLingeringDeclarations()
  decls := append(ds.([]interface{}), lingering...)
  for _, i := range decls {
    switch d := i.(type) {
      case *ast.Constant:
        f.Constants = append(f.Constants, d)
      case *ast.Context:
        f.Contexts = append(f.Contexts, d)
      case *ast.Struct:
        f.Structs = append(f.Structs, d)
      case *ast.Pragma:
        f.Pragmas = append(f.Pragmas, d)
      default:
        return nil, errors.New("unknown declaration")
    }
  }
  return f, nil
}

//  Declaration ::= OptAnnotation ConstDecl
//  Declaration ::= OptAnnotation ContextDecl OptSemi XXX
//  Declaration ::= OptAnnotation StructDecl OptSemi
//  Declaration ::= extern struct ID OptWithContext ; XXX
//  Declaration ::= trunnel ID IDList ;

Declaration <- _ d:(ConstDeclaration / ContextDeclaration / StructDeclaration / ExternDeclaration / PragmaDeclaration) _ {
  return d, nil
}

//  ConstDecl ::= const CONST_ID = INT ;

ConstDeclaration <- "const" __ n:ConstIdentifier _ '=' _ v:IntLiteral _ ';' {
  return &ast.Constant{
    Name: n.(string),
    Value: v.(int64),
  }, nil
}

//  ContextDecl ::= context ID { ContextMembers }
//  ContextMember ::= IntType ID ;
//  ContextMembers ::=
//  ContextMembers ::= ContextMembers OptAnnotation ContextMember

ContextDeclaration <- "context" __ n:Identifier __ '{' _ fs:ContextMember* _ '}' _ ';'? {
  f := make([]*ast.Field, 0)
  for _, i := range fs.([]interface{}) {
    f = append(f, i.(*ast.Field))
  }
  return &ast.Context{
    Name: n.(string),
    Members: f,
  }, nil
}

ContextMember <- _ t:IntType __ n:Identifier _ ';' _ {
  return &ast.Field{
    Type: t.(*ast.IntType),
    Name: n.(string),
  }, nil
}

// StructDeclaration is a top-level struct declaration, which may be followed
// by a semi-colon.

StructDeclaration <- s:StructDecl _ ';'? {
  return s, nil
}

//  StructDecl ::= struct ID OptWithContext { StructMembers StructEnding } XXX context ref

StructDecl <- n:StructIdentifier ctx:(__ ContextRefs)? _ '{' ms:StructMember* _ e:StructEnding? _ '}' {
  m := make([]ast.Member, 0)
  for _, i := range ms.([]interface{}) {
    m = append(m, i.(ast.Member))
  }
  if e != nil {
    m = append(m, e.(ast.Member))
  }

  s := &ast.Struct{
    Name: n.(string),
    Members: m,
  }

  if ctx != nil {
    s.Contexts = ctx.([]interface{})[1].([]string)
  }

  return s, nil
}

StructIdentifier <- "struct" __ n:Identifier {
  return n, nil
}

ExternDeclaration <- "extern" __ n:StructIdentifier ctx:(__ ContextRefs)?_ ';' {
  e := &ast.Struct{
    Name: n.(string),
  }
  if ctx != nil {
    e.Contexts = ctx.([]interface{})[1].([]string)
  }
  return e, nil
}

PragmaDeclaration <- "trunnel" __ n:Identifier __ opts:IdentifierList _ ';' {
  return &ast.Pragma{
    Type: n.(string),
    Options: opts.([]string),
  }, nil
}

//  OptWithContext ::=
//  OptWithContext ::= with context IDList XXX

ContextRefs <- "with" __ "context" __ ns:IdentifierList {
  return ns, nil
}

//  StructMembers ::=
//  StructMembers ::= StructMembers OptAnnotation StructMember ; XXX

//  StructMember ::= SMArray
//  StructMember ::= SMInteger
//  StructMember ::= SMPosition XXX
//  StructMember ::= SMString
//  StructMember ::= SMStruct
//  StructMember ::= SMUnion XXX

StructMember <- _ m:(SMArray / SMInteger / SMPosition / SMString / SMStruct / SMUnion) _ ';' {
  return m, nil
}

//  StructEnding ::=
//  StructEnding ::= SMRemainder ;
//  StructEnding ::= eos ;

StructEnding <- _ e:(SMRemainder / StructEOS) _ ';' {
  return e, nil
}

StructEOS <- "eos" {
  return &ast.EOS{}, nil
}

//  SMArray ::= SMFixedArray
//  SMArray ::= SMVarArray

SMArray <- a:(SMFixedArray / SMVarArray) {
  return a, nil
}

//  SMFixedArray ::= ArrayBase ID [ Integer ]

SMFixedArray <- b:ArrayBase __ n:Identifier _ '[' s:Integer ']' {
  return &ast.Field{
    Name: n.(string),
    Type: &ast.FixedArrayMember{
      Base: b.(ast.ArrayBase),
      Size: s.(ast.Integer),
    },
  }, nil
}

//  SMVarArray ::= ArrayBase ID [ .. - Integer ]
//  SMVarArray ::= ArrayBase ID [ IDRef ]

SMVarArray <- b:ArrayBase __ n:Identifier _ '[' l:LengthConstraint ']' {
  return &ast.Field{
    Name: n.(string),
    Type: &ast.VarArrayMember{
      Base: b.(ast.ArrayBase),
      Constraint: l.(ast.LengthConstraint),
    },
  }, nil
}

LengthConstraint <- l:(Leftover / IDRef) {
  return l, nil
}

Leftover <- "..-" i:Integer {
  return &ast.Leftover{Num: i.(ast.Integer)}, nil
}

//  SMRemainder ::= OptAnnotation ArrayBase ID [ ] XXX annotation

SMRemainder <- b:ArrayBase __ n:Identifier _ '[' _ ']' {
  return &ast.Field{
    Name: n.(string),
    Type: &ast.VarArrayMember{
      Base: b.(ast.ArrayBase),
      Constraint: nil,
    },
  }, nil
}

//  ArrayBase ::= IntType
//  ArrayBase ::= StructDecl XXX
//  ArrayBase ::= char
//  ArrayBase ::= struct ID

ArrayBase <- t:(IntType / CharType / StructRef) {
  return t, nil
}


//  SMInteger ::= IntType ID OptIntConstraint

SMInteger <- t:IntType _ n:Identifier _ cst:IntConstraint? {
  i := t.(*ast.IntType)
  if cst != nil {
    i.Constraint = cst.(*ast.IntegerList)
  }
  return &ast.Field{
    Name: n.(string),
    Type: i,
  }, nil
}

// SMPosition ::= @ PtrKW ID

SMPosition <- "@ptr" __ n:Identifier {
  return &ast.Field{
    Name: n.(string),
    Type: &ast.Ptr{},
  }, nil
}

//  SMString ::= nulterm ID

SMString <- "nulterm" __ n:Identifier {
  return &ast.Field{
    Name: n.(string),
    Type: &ast.NulTermString{},
  }, nil
}

//  SMStruct ::= StructDecl ID
//  SMStruct ::= struct ID ID

SMStruct <- s:StructRef __ n:Identifier {
  return &ast.Field{
    Name: n.(string),
    Type: s.(*ast.StructRef),
  }, nil
}

//  SMUnion ::= union ID [ IDRef ] OptUnionLength { UnionMembers }

SMUnion <- "union" __ n:Identifier _ '[' t:IDRef ']' _ l:UnionLength? _ '{' _ cs:UnionMember* _ '}' {
  cases := make([]*ast.UnionCase, 0)
  for _, i := range cs.([]interface{}) {
    cases = append(cases, i.(*ast.UnionCase))
  }
  u := &ast.UnionMember{
    Name: n.(string),
    Tag: t.(*ast.IDRef),
    Cases: cases,
  }
  if l != nil {
    u.Length = l.(ast.LengthConstraint)
  }
  return u, nil
}

UnionLength <- "with" __ "length" __ l:LengthConstraint {
  return l, nil
}

//  UnionMember ::= UnionCase : UnionFields OptExtentSpec XXX extent spec

UnionMember <- _ cse:UnionCase _ ':' _ fs:UnionBody _ {
  uc := &ast.UnionCase{}
  if fs != nil {
    uc.Members = fs.([]ast.Member)
  }
  if cse != nil {
    uc.Case = cse.(*ast.IntegerList)
  }
  return uc, nil
}

//  UnionCase ::= IntList
//  UnionCase ::= default

UnionCase <- l:IntList {
  return l, nil
} / "default" {
  return nil, nil
}

//  UnionFields ::= ; XXX
//  UnionFields ::= SMRemainder ; XXX
//  UnionFields ::= UnionField ; XXX
//  UnionFields ::= UnionFields UnionField ; XXX
//  UnionFields ::= fail ; XXX
//  UnionFields ::= ignore ; XXX

UnionBody <- _ ';' {
  return nil, nil
} / "fail" _ ';' {
  return []ast.Member{&ast.Fail{}}, nil
} / "ignore" _ ';' {
  return []ast.Member{&ast.Ignore{}}, nil
} / fs:UnionFields {
  return fs, nil
}

UnionFields <- ms:UnionField* _ e:ExtentSpec? {
  fs := []ast.Member{}
  for _, i := range ms.([]interface{}) {
    fs = append(fs, i.(ast.Member))
  }
  if e != nil {
    fs = append(fs, e)
  }
  return fs, nil
}

//  UnionField ::= SMFixedArray
//  UnionField ::= SMInteger
//  UnionField ::= SMString
//  UnionField ::= SMStruct
//  UnionField ::= SMVarArray

UnionField <- _ m:(SMArray / SMInteger / SMString / SMStruct) _ ';' {
  return m, nil
}

//  OptExtentSpec ::=
//  OptExtentSpec ::= ... ;
//  OptExtentSpec ::= SMRemainder ;

ExtentSpec <- "..." _ ';' {
  return &ast.Ignore{}, nil
} / r:SMRemainder _ ';' {
  return r, nil
}

StructRef <- s:StructDecl #{ c.addLingeringDeclaration(s); return nil; } {
  return &ast.StructRef{Name: s.(*ast.Struct).Name}, nil
} / n:StructIdentifier {
  return &ast.StructRef{Name: n.(string)}, nil
}

CharType <- "char" {
  return &ast.CharType{}, nil
}

//  IntType ::= u16
//  IntType ::= u32
//  IntType ::= u64
//  IntType ::= u8

IntType <- 'u' b:("8" / "16" / "32" / "64") {
  s, err := strconv.Atoi(string(b.([]byte)))
  return &ast.IntType{Size: uint(s)}, err
}

//  OptIntConstraint ::=
//  OptIntConstraint ::= IN [ IntList ]

IntConstraint <- "IN" __ '[' _ l:IntList _ ']' {
  return l, nil
}

//  IntList ::= IntList , IntListMember
//  IntList ::= IntListMember

IntList <- m:IntListMember ms:(_ ',' _ IntListMember)* {
  r := []*ast.IntegerRange{m.(*ast.IntegerRange)}
  for _, i := range ms.([]interface{}) {
    r = append(r, i.([]interface{})[3].(*ast.IntegerRange))
  }
  return &ast.IntegerList{Ranges: r}, nil
}

//  IntListMember ::= Integer
//  IntListMember ::= Integer .. Integer

IntListMember <- lo:Integer hi:( _ ".." _ Integer )? {
  r := &ast.IntegerRange{
    Low: lo.(ast.Integer),
  }
  if hi != nil {
    r.High = hi.([]interface{})[3].(ast.Integer)
  }
  return r, nil
}

//  Integer ::= CONST_ID
//  Integer ::= INT

Integer <- i:(IntegerConstRef / IntegerLiteral) {
  return i, nil
}

IntegerConstRef <- n:ConstIdentifier {
  return &ast.IntegerConstRef{Name: n.(string)}, nil
}

IntegerLiteral <- v:IntLiteral {
  return &ast.IntegerLiteral{Value: v.(int64)}, nil
}

// Identifiers

//  IDRef ::= ID
//  IDRef ::= ID . ID

IDRef <- s:(Identifier '.')? n:Identifier {
  r := &ast.IDRef{
    Name: n.(string),
  }
  if s != nil {
    r.Scope = s.([]interface{})[0].(string)
  }
  return r, nil
}

IdentifierList <- n:Identifier ns:(_ ',' _ Identifier)* {
  ids := []string{n.(string)}
  for _, i := range ns.([]interface{}) {
    ids = append(ids, i.([]interface{})[3].(string))
  }
  return ids, nil
}

Identifier <- [a-zA-Z_] [a-zA-Z0-9_]* {
  return string(c.text), nil
}

ConstIdentifier <- [A-Z_] [A-Z0-9_]* {
  return string(c.text), nil
}

// Primitives

IntLiteral <- (HexLiteral / OctalLiteral / DecimalLiteral) {
  return strconv.ParseInt(string(c.text), 0, 64)
}

DecimalLiteral <- [0-9]+

HexLiteral <- "0x" [0-9a-fA-F]+

OctalLiteral <- '0' [0-7]+

// Comments

SourceChar <- .
Comment <- MultiLineComment / SingleLineComment
MultiLineComment <- "/*" ( !"*/" SourceChar )* "*/"
SingleLineComment <- "//" ( !EOL SourceChar )*

// Character classes

__ <- Skip+
_ <- Skip*

Skip <- (Whitespace / EOL / Comment)

Whitespace <- [ \t\r]
EOL <- '\n'
EOF <- !.

