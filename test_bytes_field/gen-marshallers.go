// Code generated by trunnel. DO NOT EDIT.

package bytesfield

import "errors"

type IRecv struct {
	Bytes [8]uint8
}

func (i *IRecv) Parse(data []byte) ([]byte, error) {
	cur := data
	{
		for idx := 0; idx < 8; idx++ {
			if len(cur) < 1 {
				return nil, errors.New("data too short")
			}
			i.Bytes[idx] = cur[0]
			cur = cur[1:]
		}
	}
	return cur, nil
}

func ParseIRecv(data []byte) (*IRecv, error) {
	i := new(IRecv)
	_, err := i.Parse(data)
	if err != nil {
		return nil, err
	}
	return i, nil
}

func (i *IRecv) encodeBinary() []byte {
	var buf []byte
	for idx := 0; idx < 8; idx++ {
		buf = append(buf, byte(i.Bytes[idx]))
	}
	return buf
}

func (i *IRecv) MarshalBinary() ([]byte, error) {
	if err := i.validate(); err != nil {
		return nil, err
	}
	return i.encodeBinary(), nil
}

func (i *IRecv) validate() error {
	if len(i.Bytes) != 8 {
		return errors.New("array length constraint violated")
	}
	for idx := 0; idx < len(i.Bytes); idx++ {
	}
	return nil
}
