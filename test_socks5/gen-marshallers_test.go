// Code generated by trunnel. DO NOT EDIT.

package socks5

import "testing"

func TestSocks5ClientVersionCorpus(t *testing.T) {
	cases := []struct {
		Data []byte
	}{
		{
			Data: []byte{0x5, 0xf, 0x62, 0xf6, 0x5f, 0xf9, 0x4f, 0x6e, 0xc8, 0x73, 0x5b, 0x4, 0x12, 0xff, 0xd3, 0x41, 0xc0},
		},
	}
	for _, c := range cases {
		_, err := ParseSocks5ClientVersion(c.Data)
		if err != nil {
			t.Fatal(err)
		}
	}
}

func TestSocks5ServerMethodCorpus(t *testing.T) {
	cases := []struct {
		Data []byte
	}{
		{
			Data: []byte{0x5, 0xa5},
		},
	}
	for _, c := range cases {
		_, err := ParseSocks5ServerMethod(c.Data)
		if err != nil {
			t.Fatal(err)
		}
	}
}

func TestDomainnameCorpus(t *testing.T) {
	cases := []struct {
		Data []byte
	}{
		{
			Data: []byte{0x14, 0x59, 0xf6, 0x56, 0xf8, 0x9e, 0xb7, 0xae, 0xa8, 0xf3, 0x32, 0x9c, 0x42, 0xc7, 0x52, 0xb2, 0xf4, 0xbd, 0x2a, 0xe8, 0xee},
		},
	}
	for _, c := range cases {
		_, err := ParseDomainname(c.Data)
		if err != nil {
			t.Fatal(err)
		}
	}
}

func TestSocks5ClientRequestCorpus(t *testing.T) {
	cases := []struct {
		Data []byte
	}{
		{
			Data: []byte{0x5, 0x3, 0x0, 0x1, 0xd, 0xce, 0xcc, 0x77, 0xc1, 0x8f},
		},
		{
			Data: []byte{0x5, 0x2, 0x0, 0x4, 0xca, 0xaa, 0x1, 0x38, 0x2c, 0x51, 0x6c, 0xce, 0x6b, 0x79, 0x8a, 0xf, 0x0, 0x3f, 0x5c, 0x4, 0xc1, 0x8f},
		},
		{
			Data: []byte{0x5, 0x3, 0x0, 0xb0, 0xe, 0x9e, 0x43, 0xe9, 0xa, 0x28, 0xa8, 0x74, 0xd0, 0x79, 0x50, 0x5b, 0xad, 0xdf, 0xee, 0xc1, 0x8f},
		},
	}
	for _, c := range cases {
		_, err := ParseSocks5ClientRequest(c.Data)
		if err != nil {
			t.Fatal(err)
		}
	}
}

func TestSocks5ServerReplyCorpus(t *testing.T) {
	cases := []struct {
		Data []byte
	}{
		{
			Data: []byte{0x5, 0xff, 0x0, 0x1, 0xca, 0x8, 0x12, 0x6d, 0xd6, 0xae},
		},
		{
			Data: []byte{0x5, 0x7e, 0x0, 0x4, 0x2c, 0x66, 0xdb, 0x3, 0x43, 0xb9, 0xc2, 0x44, 0xbb, 0x3c, 0x30, 0x6c, 0xe3, 0xcb, 0xcf, 0x9, 0xd6, 0xae},
		},
		{
			Data: []byte{0x5, 0xea, 0x0, 0x81, 0x9, 0xa1, 0xf7, 0xb2, 0x1e, 0xdb, 0x71, 0xb8, 0x66, 0x9c, 0xd6, 0xae},
		},
	}
	for _, c := range cases {
		_, err := ParseSocks5ServerReply(c.Data)
		if err != nil {
			t.Fatal(err)
		}
	}
}

func TestSocks5ClientUserpassAuthCorpus(t *testing.T) {
	cases := []struct {
		Data []byte
	}{
		{
			Data: []byte{0x1, 0x9, 0xf1, 0xab, 0xa, 0x9, 0xc9, 0x8, 0x3b, 0x75, 0x94, 0xa, 0xef, 0x35, 0x40, 0xf0, 0xb0, 0xe6, 0x9f, 0x3a, 0x43, 0xf},
		},
	}
	for _, c := range cases {
		_, err := ParseSocks5ClientUserpassAuth(c.Data)
		if err != nil {
			t.Fatal(err)
		}
	}
}

func TestSocks5ServerUserpathAuthCorpus(t *testing.T) {
	cases := []struct {
		Data []byte
	}{
		{
			Data: []byte{0x1, 0x75},
		},
	}
	for _, c := range cases {
		_, err := ParseSocks5ServerUserpathAuth(c.Data)
		if err != nil {
			t.Fatal(err)
		}
	}
}

func TestSocks4ClientRequestCorpus(t *testing.T) {
	cases := []struct {
		Data []byte
	}{
		{
			Data: []byte{0x4, 0xf1, 0xfd, 0xb6, 0x0, 0x0, 0x0, 0xf0, 0x64, 0x6b, 0x6a, 0x7a, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x69, 0x0, 0x77, 0x6b, 0x6b, 0x79, 0x79, 0x72, 0x71, 0x69, 0x6b, 0x6b, 0x0},
		},
		{
			Data: []byte{0x4, 0x1, 0x3e, 0x8c, 0x95, 0x7a, 0x7b, 0xa1, 0x64, 0x61, 0x78, 0x61, 0x77, 0x77, 0x0},
		},
	}
	for _, c := range cases {
		_, err := ParseSocks4ClientRequest(c.Data)
		if err != nil {
			t.Fatal(err)
		}
	}
}

func TestSocks4ServerReplyCorpus(t *testing.T) {
	cases := []struct {
		Data []byte
	}{
		{
			Data: []byte{0x4, 0xb3, 0x81, 0xaf, 0xf9, 0xe, 0xca, 0x15},
		},
	}
	for _, c := range cases {
		_, err := ParseSocks4ServerReply(c.Data)
		if err != nil {
			t.Fatal(err)
		}
	}
}

func TestTorSocksauthKeyvalCorpus(t *testing.T) {
	cases := []struct {
		Data []byte
	}{
		{
			Data: []byte{0x0, 0x6, 0xe2, 0x3a, 0xb3, 0x8a, 0x76, 0x8c, 0x0, 0xf, 0xf0, 0x3b, 0xfa, 0x3f, 0xe, 0x16, 0x50, 0xd9, 0x8d, 0x38, 0xc2, 0xb6, 0x72, 0xb8, 0xc5},
		},
	}
	for _, c := range cases {
		_, err := ParseTorSocksauthKeyval(c.Data)
		if err != nil {
			t.Fatal(err)
		}
	}
}

func TestTorExtendedSocksAuthRequestCorpus(t *testing.T) {
	cases := []struct {
		Data []byte
	}{
		{
			Data: []byte{0x1, 0x0, 0x5, 0x0, 0x2, 0xc1, 0x23, 0x0, 0x7, 0x9e, 0x67, 0xa7, 0x6b, 0xe0, 0x87, 0x48, 0x0, 0xb, 0xa6, 0xa5, 0x9e, 0xaf, 0x9, 0xce, 0x82, 0xdd, 0x38, 0x50, 0xc8, 0x0, 0x1, 0x18, 0x0, 0x4, 0x93, 0x42, 0x87, 0x68, 0x0, 0x5, 0x59, 0xca, 0x72, 0x41, 0xc8, 0x0, 0xa, 0x2, 0x65, 0x72, 0xb7, 0x1c, 0x78, 0x90, 0xcd, 0x65, 0x9e, 0x0, 0x7, 0xbf, 0x7c, 0xb1, 0xff, 0xe9, 0xf5, 0xc4, 0x0, 0x8, 0x44, 0xfc, 0x39, 0x61, 0x22, 0x58, 0x91, 0x48, 0x0, 0x5, 0xcc, 0xab, 0x5c, 0xf3, 0xee},
		},
	}
	for _, c := range cases {
		_, err := ParseTorExtendedSocksAuthRequest(c.Data)
		if err != nil {
			t.Fatal(err)
		}
	}
}

func TestTorExtendedSocksAuthResponseCorpus(t *testing.T) {
	cases := []struct {
		Data []byte
	}{
		{
			Data: []byte{0x1, 0x1d, 0x0, 0x8, 0x0, 0x1, 0x32, 0x0, 0x14, 0x79, 0xc7, 0x1, 0xb3, 0x5c, 0xc9, 0x5e, 0x11, 0x3a, 0x6e, 0x3f, 0x38, 0x6b, 0x32, 0x2, 0xb8, 0x71, 0xd4, 0x8b, 0xde, 0x0, 0xa, 0x17, 0xc9, 0x14, 0xe0, 0xa1, 0x64, 0xe1, 0xfd, 0xd5, 0x67, 0x0, 0x12, 0x8e, 0x26, 0x34, 0xd, 0x48, 0xe8, 0xcc, 0xb, 0x33, 0x1f, 0x1, 0x46, 0xd0, 0x76, 0xac, 0xfc, 0xc8, 0x5a, 0x0, 0xa, 0x43, 0xd7, 0xd1, 0x13, 0x28, 0xca, 0x34, 0x5e, 0x9b, 0xa3, 0x0, 0xc, 0x94, 0x9f, 0x46, 0x69, 0xcb, 0x63, 0xab, 0x60, 0x55, 0x0, 0xae, 0x1d, 0x0, 0x11, 0xd7, 0x7a, 0xa9, 0x6b, 0xf9, 0x3c, 0xa, 0xdd, 0x2e, 0xfa, 0xe, 0xeb, 0x45, 0x28, 0xac, 0x3a, 0x91, 0x0, 0x2, 0xa3, 0xe8, 0x0, 0xa, 0x1, 0x3, 0xbd, 0x87, 0xb8, 0xac, 0x1a, 0xac, 0x6d, 0x4e, 0x0, 0x7, 0xe7, 0x32, 0xe1, 0xd6, 0x58, 0xa3, 0xb0, 0x0, 0x11, 0xa9, 0x58, 0x5c, 0x2e, 0xc4, 0x9, 0xbb, 0xb, 0xe6, 0x2c, 0x85, 0x2e, 0xbe, 0x6d, 0xe6, 0x82, 0xf8, 0x0, 0x10, 0x30, 0x53, 0x9, 0x47, 0x5a, 0xa8, 0x57, 0x80, 0x83, 0x91, 0xe, 0xf8, 0xa3, 0xc, 0xc3, 0xa7, 0x0, 0x11, 0x2b, 0x80, 0x39, 0x88, 0xe6, 0x6, 0x62, 0x31, 0xa3, 0x63, 0x6b, 0x13, 0x20, 0xd2, 0xcc, 0x9f, 0x56, 0x0, 0xb, 0x34, 0x12, 0x70, 0xb9, 0xde, 0xb9, 0xa, 0x41, 0xba, 0xa2, 0xf7, 0x0, 0x8, 0xf8, 0x7c, 0xdb, 0x70, 0xbb, 0x4b, 0xa3, 0x93, 0x0, 0x5, 0x3c, 0x8c, 0x1f, 0x89, 0xf7},
		},
	}
	for _, c := range cases {
		_, err := ParseTorExtendedSocksAuthResponse(c.Data)
		if err != nil {
			t.Fatal(err)
		}
	}
}
