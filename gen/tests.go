package gen

import (
	"bytes"
	"fmt"

	"github.com/mmcloughlin/trunnel/tv"
	"golang.org/x/tools/imports"
)

// CorpusTests generates a test file based on a corpus of test vectors.
func CorpusTests(pkg string, c *tv.Corpus) ([]byte, error) {
	buf := &bytes.Buffer{}

	fmt.Fprintf(buf, "// Code generated by trunnel. DO NOT EDIT.\n\n")
	fmt.Fprintf(buf, "package %s\n\n", pkg)

	for _, s := range c.Suites {
		vs := unconstrained(s.Vectors)
		if len(vs) == 0 {
			continue
		}

		fmt.Fprintf(buf, "func Test%sCorpus(t *testing.T) {\n", name(s.Type))

		// cases
		fmt.Fprintf(buf, "cases := []struct{\nData []byte\n}{\n")
		for _, v := range vs {
			fmt.Fprintf(buf, "{\nData: %#v,\n},\n", v.Data)
		}
		fmt.Fprintf(buf, "}\n")

		// test each one
		fmt.Fprintf(buf, "for _, c := range cases {\n")
		fmt.Fprintf(buf, "_, err := Parse%s(c.Data)\n", name(s.Type))
		fmt.Fprintf(buf, "if err != nil { t.Fatal(err) }\n")
		fmt.Fprintf(buf, "}\n")

		fmt.Fprintf(buf, "}\n\n")
	}

	return imports.Process("", buf.Bytes(), nil)
}

func unconstrained(vs []tv.Vector) []tv.Vector {
	for _, v := range vs {
		if len(v.Constraints) > 0 {
			return nil
		}
	}
	return vs
}
