package gen

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"strings"

	"github.com/mmcloughlin/trunnel/ast"
	"golang.org/x/tools/imports"
)

// File generates code for the given AST.
func File(pkg string, f *ast.File) ([]byte, error) {
	buf := &bytes.Buffer{}
	g := &generator{
		pkg: pkg,
		w:   buf,
	}
	g.file(f)
	fmt.Println(buf.String())
	return imports.Process("", buf.Bytes(), nil)
}

type generator struct {
	pkg string
	w   io.Writer

	receiver string // method receiver variable
}

func (g *generator) printf(format string, a ...interface{}) {
	fmt.Fprintf(g.w, format, a...)
}

func (g *generator) file(f *ast.File) {
	g.printf("// Code generated by trunnel. DO NOT EDIT.\n\n")
	g.printf("package %s\n\n", g.pkg)

	for _, c := range f.Constants {
		g.constant(c)
	}
	for _, s := range f.Structs {
		g.structure(s)
	}
}

func (g *generator) constant(c *ast.Constant) {
	g.printf("const %s = %d\n\n", name(c.Name), c.Value)
}

func (g *generator) structure(s *ast.Struct) {
	g.structDecl(s)
	g.parse(s)
}

func (g *generator) structDecl(s *ast.Struct) {
	g.printf("type %s struct {\n", name(s.Name))
	for _, m := range s.Members {
		g.structMemberDecl(m)
	}
	g.printf("}\n\n")
}

func (g *generator) structMemberDecl(m ast.Member) {
	switch m := m.(type) {
	case *ast.Field:
		g.printf("\t%s %s\n", name(m.Name), tipe(m.Type))
	case *ast.UnionMember:
		g.structUnionMemberDecl(m)
	case *ast.EOS:
		// ignore
	default:
		panic(unexpected(m))
	}
}

func (g *generator) structUnionMemberDecl(m *ast.UnionMember) {
	for _, c := range m.Cases {
		for _, f := range c.Members {
			switch f := f.(type) {
			case *ast.Fail, *ast.Ignore:
				// nothing
			default:
				g.structMemberDecl(f)
			}
		}
	}
}

// parse generates a parse function for the type.
func (g *generator) parse(s *ast.Struct) {
	g.receiver = strings.ToLower(s.Name[:1])
	g.printf("func (%s *%s) Parse(data []byte) ([]byte, error) {\n", g.receiver, name(s.Name))
	for _, m := range s.Members {
		g.parseMember(m)
	}
	g.printf("return data, nil\n}\n\n")
	g.receiver = ""
}

func (g *generator) parseMember(m ast.Member) {
	g.printf("{\n")
	switch m := m.(type) {
	case *ast.Field:
		lhs := g.receiver + "." + name(m.Name)
		g.parseType(lhs, m.Type)

	case *ast.UnionMember:
		g.parseUnionMember(m)

	case *ast.EOS:
		g.printf("if len(data) > 0 { return nil, errors.New(\"trailing data disallowed\") }\n")

	default:
		panic(unexpected(m))
	}
	g.printf("}\n")
}

func (g *generator) parseType(lhs string, t ast.Type) {
	switch t := t.(type) {
	case *ast.NulTermString:
		g.printf("i := bytes.IndexByte(data, 0)\n")
		g.printf("if i < 0 { return nil, errors.New(\"could not parse nul-term string\") }\n")
		g.printf("%s, data = string(data[:i]), data[i+1:]\n", lhs)

	case *ast.IntType:
		n := t.Size / 8
		g.lengthCheck(strconv.Itoa(n))
		if n == 1 {
			g.printf("%s = data[0]\n", lhs)
		} else {
			g.printf("%s = binary.BigEndian.Uint%d(data)\n", lhs, t.Size)
		}
		if t.Constraint != nil {
			g.printf("if !(%s) {\n", conditional(lhs, t.Constraint))
			g.printf("return nil, errors.New(\"integer constraint violated\")\n")
			g.printf("}\n")
		}
		g.printf("data = data[%d:]\n", n)

	case *ast.CharType:
		g.parseType(lhs, ast.U8)

	case *ast.StructRef:
		g.printf("var err error\n")
		g.printf("%s = new(%s)\n", lhs, name(t.Name))
		g.printf("data, err = %s.Parse(data)\n", lhs)
		g.printf("if err != nil { return nil, err }\n")

	case *ast.FixedArrayMember:
		g.parseArray(lhs, t.Base, t.Size)

	case *ast.VarArrayMember:
		g.parseArray(lhs, t.Base, t.Constraint)

	default:
		panic(unexpected(t))
	}
}

func (g *generator) parseArray(lhs string, base ast.Type, s ast.LengthConstraint) {
	switch s := s.(type) {
	case *ast.IntegerConstRef, *ast.IntegerLiteral:
		g.printf("for i := 0; i < %s; i++ {\n", integer(s))
		g.parseType(lhs+"[i]", base)
		g.printf("}\n")

	case *ast.IDRef:
		size := fmt.Sprintf("int(%s)", g.ref(s))
		g.printf("%s = make([]%s, %s)\n", lhs, tipe(base), size)
		g.printf("for i := 0; i < %s; i++ {\n", size)
		g.parseType(lhs+"[i]", base)
		g.printf("}\n")

	case *ast.Leftover:
		g.lengthCheck(integer(s.Num))
		g.printf("restore := data[len(data)-%s:]\n", integer(s.Num))
		g.printf("data = data[:len(data)-%s]\n", integer(s.Num))
		g.parseArray(lhs, base, nil)
		g.printf("data = restore\n")

	case nil:
		g.printf("%s = make([]%s, 0)\n", lhs, tipe(base))
		g.printf("for len(data) > 0 {\n")
		g.printf("var t %s\n", tipe(base))
		g.parseType("t", base)
		g.printf("%s = append(%s, t)\n", lhs, lhs)
		g.printf("}\n")

	default:
		panic(unexpected(s))
	}
}

func (g *generator) parseUnionMember(u *ast.UnionMember) {
	// XXX unions with length
	tag := g.ref(u.Tag)
	g.printf("switch {\n")
	for _, c := range u.Cases {
		g.printf("case %s:\n", conditional(tag, c.Case))
		for _, m := range c.Members {
			g.parseMember(m)
		}
	}
	g.printf("}\n")
}

// ref builds a variable reference that resolves to the given trunnel IDRef.
func (g *generator) ref(r *ast.IDRef) string {
	if r.Scope == "" {
		return g.receiver + "." + name(r.Name)
	}
	panic("not implemented") // XXX
}

func (g *generator) lengthCheck(min string) {
	g.printf("if len(data) < %s { return nil, errors.New(\"data too short\") }\n", min)
}

func conditional(v string, c *ast.IntegerList) string {
	clauses := make([]string, len(c.Ranges))
	for i, r := range c.Ranges {
		// Single case
		if r.High == nil {
			clauses[i] = fmt.Sprintf("%s == %s", v, integer(r.Low))
		} else {
			clauses[i] = fmt.Sprintf("(%s <= %s && %s <= %s)", integer(r.Low), v, v, integer(r.High))
		}
	}
	return strings.Join(clauses, " || ")
}

func tipe(t interface{}) string {
	switch t := t.(type) {
	case *ast.NulTermString:
		return "string"
	case *ast.IntType:
		return "uint" + strconv.Itoa(t.Size)
	case *ast.CharType:
		return "byte"
	case *ast.StructRef:
		return "*" + name(t.Name)
	case *ast.FixedArrayMember:
		return fmt.Sprintf("[%s]%s", integer(t.Size), tipe(t.Base))
	case *ast.VarArrayMember:
		return fmt.Sprintf("[]%s", tipe(t.Base))
	default:
		panic(unexpected(t))
	}
}

func integer(i ast.Integer) string {
	switch i := i.(type) {
	case *ast.IntegerConstRef:
		return name(i.Name)
	case *ast.IntegerLiteral:
		return strconv.FormatInt(i.Value, 10)
	default:
		panic(unexpected(i))
	}
}

func unexpected(t interface{}) string {
	return fmt.Sprintf("unexpected type %T", t)
}
