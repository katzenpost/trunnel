// Code generated by trunnel. DO NOT EDIT.

package pos

import (
	"bytes"
	"encoding/binary"
	"errors"
)

type Haspos struct {
	S1   string
	Pos1 int
	S2   string
	Pos2 int
	X    uint32
}

func (h *Haspos) Parse(data []byte) ([]byte, error) {
	cur := data
	{
		i := bytes.IndexByte(cur, 0)
		if i < 0 {
			return nil, errors.New("could not parse nul-term string")
		}
		h.S1, cur = string(cur[:i]), cur[i+1:]
	}
	{
		h.Pos1 = len(data) - len(cur)
	}
	{
		i := bytes.IndexByte(cur, 0)
		if i < 0 {
			return nil, errors.New("could not parse nul-term string")
		}
		h.S2, cur = string(cur[:i]), cur[i+1:]
	}
	{
		h.Pos2 = len(data) - len(cur)
	}
	{
		if len(cur) < 4 {
			return nil, errors.New("data too short")
		}
		h.X = binary.BigEndian.Uint32(cur)
		cur = cur[4:]
	}
	return cur, nil
}

func ParseHaspos(data []byte) (*Haspos, error) {
	h := new(Haspos)
	_, err := h.Parse(data)
	if err != nil {
		return nil, err
	}
	return h, nil
}
