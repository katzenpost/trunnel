// Code generated by trunnel. DO NOT EDIT.

package leftover

import (
	"encoding/binary"
	"errors"
)

type Leftover struct {
	Head [2]uint32
	Mid  []uint32
	Tail [2]uint32
}

func (l *Leftover) Parse(data []byte) ([]byte, error) {
	cur := data
	{
		for i := 0; i < 2; i++ {
			if len(cur) < 4 {
				return nil, errors.New("data too short")
			}
			l.Head[i] = binary.BigEndian.Uint32(cur)
			cur = cur[4:]
		}
	}
	{
		if len(cur) < 8 {
			return nil, errors.New("data too short")
		}
		restore := cur[len(cur)-8:]
		cur = cur[:len(cur)-8]
		l.Mid = make([]uint32, 0)
		for len(cur) > 0 {
			var t uint32
			if len(cur) < 4 {
				return nil, errors.New("data too short")
			}
			t = binary.BigEndian.Uint32(cur)
			cur = cur[4:]
			l.Mid = append(l.Mid, t)
		}
		if len(cur) > 0 {
			return nil, errors.New("trailing data disallowed")
		}
		cur = restore
	}
	{
		for i := 0; i < 2; i++ {
			if len(cur) < 4 {
				return nil, errors.New("data too short")
			}
			l.Tail[i] = binary.BigEndian.Uint32(cur)
			cur = cur[4:]
		}
	}
	return cur, nil
}
