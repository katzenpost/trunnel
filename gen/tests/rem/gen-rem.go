// Code generated by trunnel. DO NOT EDIT.

package rem

import (
	"encoding/binary"
	"errors"
)

type Rem struct {
	Head uint32
	Tail []uint8
}

func (r *Rem) Parse(data []byte) ([]byte, error) {
	cur := data
	{
		if len(cur) < 4 {
			return nil, errors.New("data too short")
		}
		r.Head = binary.BigEndian.Uint32(cur)
		cur = cur[4:]
	}
	{
		r.Tail = make([]uint8, 0)
		for len(cur) > 0 {
			var t uint8
			if len(cur) < 1 {
				return nil, errors.New("data too short")
			}
			t = cur[0]
			cur = cur[1:]
			r.Tail = append(r.Tail, t)
		}
	}
	return cur, nil
}
